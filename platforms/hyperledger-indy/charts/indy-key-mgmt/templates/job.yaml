##############################################################################################
#  Copyright Accenture. All Rights Reserved.
#
#  SPDX-License-Identifier: Apache-2.0
##############################################################################################

apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "indy-key-mgmt.name" . }}-job
  namespace: {{ .Release.Namespace }}
  annotations:
    helm.sh/hook-delete-policy: "hook-succeeded"
  labels:
    app: {{ .Release.Name }}
    app.kubernetes.io/name: indy-key-mgmt-job
    app.kubernetes.io/component: key-mgmt-job
    app.kubernetes.io/part-of: {{ include "indy-key-mgmt.fullname" . }}
    app.kubernetes.io/namespace: {{ .Release.Namespace }}
    app.kubernetes.io/release: {{ .Release.Name }}
    app.kubernetes.io/managed-by: helm
spec:
  backoffLimit: 3
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}
        app.kubernetes.io/name: indy-key-mgmt-job
        app.kubernetes.io/component: key-mgmt-job
        app.kubernetes.io/part-of: {{ include "indy-key-mgmt.fullname" . }}
        app.kubernetes.io/namespace: {{ .Release.Namespace }}
        app.kubernetes.io/release: {{ .Release.Name }}
        app.kubernetes.io/managed-by: helm
    spec:
      restartPolicy: OnFailure
      imagePullSecrets:
      {{- if .Values.image.pullSecret }}
        - name: {{ .Values.image.pullSecret }}
      {{- end }}
      serviceAccountName: {{ .Values.global.serviceAccountName }}
      containers:
        - name: generate-keys
          image: {{ .Values.image.keyUtils }}
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: package-manager
              mountPath: /scripts/package-manager.sh
              subPath: package-manager.sh
          {{- if eq .Values.global.vault.type "hashicorp" }}
            - name: scripts-volume
              mountPath: /scripts/bevel-vault.sh
              subPath: bevel-vault.sh
          env:
          - name: VAULT_ADDR
            value: "{{ .Values.global.vault.address }}"
          - name: VAULT_SECRET_ENGINE
            value: "{{ .Values.global.vault.secretEngine }}"
          - name: VAULT_SECRET_PREFIX
            value: "{{ .Values.global.vault.secretPrefix }}"
          - name: KUBERNETES_AUTH_PATH
            value: "{{ .Values.global.vault.authPath }}"
          - name: VAULT_APP_ROLE
            value: "{{ .Values.global.vault.role }}"
          - name: VAULT_TYPE
            value: "{{ .Values.global.vault.type }}"
          {{- end }}
          command: ["/bin/bash", "-c"]
          args:
            - |

              # Install necessary packages using custom package manager script
              . /scripts/package-manager.sh
              packages_to_install="curl"
              install_packages "$packages_to_install"
              # Download kubectl binary
              curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.27.0/bin/linux/amd64/kubectl;
              chmod u+x kubectl && mv kubectl /usr/local/bin/kubectl;

{{- if eq .Values.global.vault.type "hashicorp" }}
              . /scripts/bevel-vault.sh
              echo "Getting Vault Token..."
              vaultBevelFunc "init"
              # Function to store secrets into Vault as well as K8s
              function safeWriteSecret {
                path=$1
                subpath=$2
                value=$3
                secretName=$(echo $subpath | sed 's/\//-/g' |sed 's/_/-/g')
                vaultBevelFunc "readJson" "${VAULT_SECRET_ENGINE}/${VAULT_SECRET_PREFIX}/${path}/${subpath}"
                if [ "$SECRETS_AVAILABLE" == "yes" ]
                then
                  # Create the Kubernetes Secret with data from Vault
                  echo "Secret found in Vault, only creating k8s secrets"
                  kubectl get secret --namespace {{ $.Release.Namespace }} "${secretName}"
                  if [ $? -ne 0 ]; then
                    kubectl create secret --namespace {{ $.Release.Namespace }} generic "${secretName}" --from-literal="value=${VAULT_SECRET}"
                  fi
                else
                  echo "Secret to be created on Vault and k8s"
                  # Store the value in Vault
                  echo "
                  {
                    \"data\": $value
                  }" > payload.json

                  vaultBevelFunc 'write' "${VAULT_SECRET_ENGINE}/${VAULT_SECRET_PREFIX}/${path}/${subpath}" 'payload.json'
                  rm payload.json
                  # Create the Kubernetes Secret using kubectl
                  kubectl create secret --namespace {{ $.Release.Namespace }} generic "${secretName}" --from-literal="value=$value"
                fi
              }
{{- else }}
              # When Vault type is not hahsicorp
              # function to create kubernetes secrets, add additional conditions here if cloud KMS is used
              function safeWriteSecret {
                path=$1
                subpath=$2
                value=$3
                secretName=$(echo $subpath | sed 's/\//-/g' |sed 's/_/-/g')
                # Create the Kubernetes Secret using kubectl
                kubectl get secret --namespace {{ $.Release.Namespace }} "${secretName}"
                if [ $? -ne 0 ]; then
                  kubectl create secret --namespace {{ $.Release.Namespace }} generic "${secretName}" --from-literal="value=$value"
                fi
              }
{{- end }}
              # function to write/save all secrets by parsing the json
              function writeAllSecret {
                identity=$1
                secretData=$2
                path=$3
                jq -r 'to_entries[] | "\(.key) \(.value)"' <<< "$secretData" | \
                while read -r key value; do
                  jq -r 'to_entries[] | "\(.key) \(.value)"' <<< "$value" | \
                  while read -r subkey subvalue; do
                    if [ "$key" == "identity" ]; then
                      # Do not iterate as identity has only 1 level of keys
                      safeWriteSecret $path "$identity/$key/$subkey" "$subvalue"
                    else
                      # Otherwise, iterate over next set of key-value pairs
                      jq -r 'to_entries[] | "\(.key) \(.value)"' <<< "$subvalue" | \
                      while read -r key1 value1; do
                        safeWriteSecret $path "$identity/$key/$subkey/$key1" "$value1"
                      done
                    fi
                  done
                done
              }
              echo "Generating the secrets for each identity"
            {{- if .Values.settings.identities.trustee }}
              trustees_json=$(generate_identity {{ .Values.settings.identities.trustee }} trustees)
              # Parse the JSON and create Kubernetes secrets
              json=$(echo "$trustees_json" | jq -r '.trustees."{{ .Values.settings.identities.trustee }}"')
              writeAllSecret "{{ .Values.settings.identities.trustee }}" "$json" "trustees"
            {{- end }}
            {{- if .Values.settings.identities.endorser }}
              endorsers_json=$(generate_identity {{ .Values.settings.identities.endorser }} endorsers)
              # Parse the JSON and create Kubernetes secrets
              json=$(echo "$endorsers_json" | jq -r '.endorsers."{{ .Values.settings.identities.endorser }}"')
              writeAllSecret "{{ .Values.settings.identities.endorser }}" "$json" "endorsers"
            {{- end }}
            {{- range .Values.settings.identities.stewards }}
              stewards_json=$(generate_identity {{ . }} stewards)
              # Parse the JSON and create Kubernetes secrets
              json=$(echo "$stewards_json" | jq -r '.stewards."{{ . }}"')
              writeAllSecret "{{ . }}" "$json" "stewards"
            {{- end }}
      volumes:
      {{- if eq .Values.global.vault.type "hashicorp" }}
      - name: scripts-volume
        configMap:
          name: bevel-vault-script
          defaultMode: 0777
      {{- end }}
      - name: package-manager
        configMap:
          name: package-manager
          defaultMode: 0777
