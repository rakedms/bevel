emailAddress : "dev-node@bevel.com"
myLegalName : "{{ .Values.nodeConf.legalName }}"
p2pAddress: "{{ .Release.Name }}.{{ .Release.Namespace }}:{{ .Values.nodeConf.p2pPort }}"
networkServices: {
    doormanURL="{{ .Values.nodeConf.doormanURL }}"
    networkMapURL="{{ .Values.nodeConf.networkMapURL }}"
}
crlCheckSoftFail: {{ .Values.nodeConf.crlCheckSoftFail }}
{{- if ne .Values.nodeConf.tlsCertCrlDistPoint "" }}
tlsCertCrlDistPoint:  "{{ .Values.nodeConf.tlsCertCrlDistPoint }}",
tlsCertCrlIssuer: "{{ .Values.nodeConf.tlsCertCrlIssuer }}"
{{- end }}
devMode: {{ .Values.nodeConf.devMode }}
{{- if .Values.nodeConf.ssh.enabled }}
sshd:  {
    port: {{ .Values.nodeConf.ssh.sshdPort }}
}
{{- end }}
rpcSettings: {
    address: "0.0.0.0:{{ .Values.nodeConf.rpc.port }}",
    adminAddress: "0.0.0.0:{{ .Values.nodeConf.rpc.adminPort }}"
}
rpcUsers: [
{{- range $user := .Values.nodeConf.rpc.users }}
    {
    user: "{{ $user.name }}",
    password: "{{ $user.password }}",
    permissions: [
        "{{ $user.permissions }}"
    ]
    }
{{- end }}
]
{{- if .Values.nodeConf.monitoring.enabled }}
jmxMonitoringHttpPort: {{ .Values.nodeConf.monitoring.port }}
{{- end }}

trustStorePassword: {{ .Values.nodeConf.creds.truststore }}
keyStorePassword : {{ .Values.nodeConf.creds.keystore }}
detectPublicIp: false
additionalP2PAddresses: ["{{ .Release.Name }}.{{ .Values.global.proxy.externalUrlSuffix }}:443"]
messagingServerAddress: "0.0.0.0:{{ .Values.nodeConf.p2pPort }}"
messagingServerExternal: false
enterpriseConfiguration: {
    externalBridge: {{ .Values.firewall.enabled }}
}
{{- if .Values.nodeConf.allowDevCorDapps.enabled }}
cordappSignerKeyFingerprintBlacklist: [
]
{{- end }}
dataSourceProperties: {
    dataSourceClassName: "{{ .Values.dataSourceProperties.dataSource.dataSourceClassName }}",
    dataSource.url: "{{ .Values.dataSourceProperties.dataSource.url }}",
    dataSource.user: "{{ .Values.dataSourceProperties.dataSource.user }}",
    dataSource.password: "{{ .Values.dataSourceProperties.dataSource.password }}"
}
database = {
{{- if eq .Values.dataSourceProperties.dataSource.dataSourceClassName "oracle.jdbc.pool.OracleDataSource" }}
    schema = xe
{{- end}}
}
{{- if .Values.nodeConf.notary }}
notary {
    serviceLegalName = "{{ .Values.nodeConf.notary.serviceLegalName }}"
    validating = {{ .Values.nodeConf.notary.validating }}
}
{{- end }}
